const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const bodyParser = require('body-parser');

const app = express();
const db = new sqlite3.Database('./todo.db');


app.use(bodyParser.urlencoded({extended: true}));
app.use(bodyParser.json());

db.run(`CREATE ATBLE IF NOT EXISTS tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    task TEXT NOT NULL,
    completed BOOLEAN DEFAULT 0) `);

app.get('/tasks', (req, res) => {
    db.all('SELECT * FROM tasks', [], function (err, rows) {
            if (err) return;
            res.status(500).json({ error: err.message });
            res.json(rows);
        });
});

app.post('/tasks', (req, res) => {
    const {task} = req.body;
    db.run('INSERT INTO tasks (tasks) VALUE (?)', 
        [task], function (err) {
            if (err) return
            res.status(500).json({error: err.message });
            res.json({id: this.lastID, task, completed: 0});
        });
});

app.put('/task/: id',(req, res) => {
    const { id } = req.params;
    db.run('UPDATE tasks SET completed = 1 WHERE id = ?', [id], function (err){
        if (err) return
        res.status(500).json({error: err.message });
        res.json({message: 'Task updated'});
    });
});

app.delete('/tasks/ :id', (req, res) => {
    const { id } = req.params;
    db.run('DELETE FROM tasks WHERE id = ?', [id], 
        function (err) {
            if (err) return
            res.status(500).json({error: err.message});
            res.json({message: 'Task deleted'});
        });
});

app.listen(3000, () => console.log('Server running on https://localhost: 3000'));